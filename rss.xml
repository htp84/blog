<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hesu's BI and Data cleaning blog</title><link>https://htp84.github.io/blog/</link><description>Write something here</description><atom:link href="https://htp84.github.io/blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:henric.sundberg@gmail.com"&gt;Henric Sundberg&lt;/a&gt; </copyright><lastBuildDate>Wed, 01 May 2019 12:58:51 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python, R and TSQL comparison - Cleaning data</title><link>https://htp84.github.io/blog/posts/python-r-tsql-comparison-cleaning-data/</link><dc:creator>Henric Sundberg</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is the third and last part of a series of posts showing data wrangling code in Python, R and TSQL. This part show different options for cleaning data.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://htp84.github.io/blog/posts/python-r-tsql-comparison-cleaning-data/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>R</category><category>TSQL</category><guid>https://htp84.github.io/blog/posts/python-r-tsql-comparison-cleaning-data/</guid><pubDate>Fri, 19 Apr 2019 06:00:00 GMT</pubDate></item><item><title>hej</title><link>https://htp84.github.io/blog/posts/hej/</link><dc:creator>Henric Sundberg</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pandas.pydata.org/"&gt;Pandas homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf"&gt;Data wrangling cheat sheet pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.rstudio.com/resources/webinars/data-wrangling-with-r-and-rstudio/"&gt;R studio guide to data wrangling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf"&gt;Data wrangling cheat sheet pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tidyr.tidyverse.org/"&gt;tidyr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dplyr.tidyverse.org/"&gt;dplyr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Purpose&lt;/th&gt;
&lt;th align="left"&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/th&gt;
&lt;th align="left"&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/th&gt;
&lt;th align="left"&gt;&lt;strong&gt;TSQL&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Data&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;pip install gapminder&lt;br&gt;from gapminder import gapminder&lt;code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;install.packages("gapminder")&lt;br&gt;library(gapminder)&lt;code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;em&gt;the gapminder dataset is inserted into a table called gapminder on a local MSSQL server.&lt;br&gt;This is done via the pandas method &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html"&gt;to_sql&lt;/a&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Filter&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder.query("continent=='Asia' &amp;amp; year==1972")&lt;/code&gt;&lt;br&gt;&lt;br&gt;or&lt;br&gt;&lt;br&gt;&lt;code&gt;gapminder[(gapminder["continent"]=="Asia") &amp;amp; (gapminder["year"]==1972)]&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html"&gt;query&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder %&amp;gt;% filter(continent=="Asia", year==1972))&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://dplyr.tidyverse.org/reference/filter.html"&gt;filter&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;SELECT * from gapminder WHERE continent='Asia' AND year=1972&lt;code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Sort&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder.sort_values(by=["year"], ascending=False)&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sort_values.html"&gt;sort_values&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder %&amp;gt;% arrange(desc(year))&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://dplyr.tidyverse.org/reference/arrange.html"&gt;arrange&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;SELECT * FROM gapminder ORDER BY year&lt;code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Pivot, spread&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder2 = gapminder[["country", "lifeExp", "year"]]&lt;br&gt;&lt;br&gt;gapminder3 = pd.DataFrame(gapminder2.pivot(index="country", columns='year',&lt;br&gt;                                          values="lifeExp").to_records())&lt;/code&gt;&lt;br&gt;&lt;br&gt;or&lt;br&gt;&lt;br&gt;&lt;code&gt;pip install neat_panda&lt;br&gt;from neat_panda import spread&lt;br&gt;&lt;br&gt;gapminder3 = spread(df=gapminder2, key="year", value="lifeExp")&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html"&gt;pivot&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/htp84/neat_panda"&gt;spread&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;&lt;br&gt;gapminder2 &amp;lt;- select(gapminder, country, lifeExp, year)&lt;br&gt;&lt;br&gt;gapminder3 &amp;lt;- spread(gapminder2, key=year, value=lifeExp)&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://tidyr.tidyverse.org/reference/spread.html"&gt;spread&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;SELECT country, [1952], [1957], [1962], [1967], [1972], [1977],&lt;br&gt;       [1982], [1987], [1992], [1997], [2002], [2007]&lt;br&gt;FROM (SELECT country, lifeExp, year FROM gapminder) AS gap&lt;br&gt;PIVOT&lt;br&gt;(&lt;br&gt;sum(lifeExp)&lt;br&gt;FOR year in ([1952], [1957], [1962], [1967], [1972], [1977],&lt;br&gt;             [1982], [1987], [1992], [1997], [2002], [2007])&lt;br&gt;) AS pvt&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/from-using-pivot-and-unpivot"&gt;PIVOT&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Unpivot, melt, gather&lt;/td&gt;
&lt;td align="left"&gt;&lt;em&gt;gapminder3 is generated as above&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;id_columns = ['country']&lt;br&gt;value_columns = ["1952", "1957", "1962", "1967", "1972", "1977",&lt;br&gt;       "1982", "1987", "1992", "1997", "2002", "2007"]&lt;br&gt;pd.melt(gapminder3, id_vars=id_columns, value_vars=value_columns,&lt;br&gt;        var_name="year", value_name="lifeExp") &lt;/code&gt;&lt;br&gt;&lt;br&gt;or&lt;br&gt;&lt;br&gt;&lt;code&gt;pip install neat_panda&lt;br&gt;from neat_panda import gather&lt;br&gt;&lt;br&gt;gather(gapminder3, key="year",value="lifeExp",&lt;br&gt;       columns=["country"], invert_columns=True)&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.melt.html"&gt;melt&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/htp84/neat_panda"&gt;gather&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;em&gt;gapminder3 is generated as above&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;value_columns &amp;lt;- c("1952", "1957", "1962", "1967",&lt;br&gt;  "1972", "1977","1982", "1987",&lt;br&gt;  "1992", "1997", "2002", "2007")&lt;br&gt;gather(gapminder3, value_columns,&lt;br&gt;  key="year", value="lifeExp")&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://tidyr.tidyverse.org/reference/gather.html"&gt;gather&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;em&gt;the table gapminder_pvt is generated via the PIVOT above&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;code&gt;SELECT country, [year], lifeExp&lt;br&gt;FROM (&lt;br&gt;SELECT country, [1952], [1957], [1962], [1967], [1972], [1977],&lt;br&gt;       [1982], [1987], [1992], [1997], [2002], [2007]&lt;br&gt;FROM gapminder_pvt) AS gap&lt;br&gt;UNPIVOT&lt;br&gt;(lifeExp FOR [year] IN ([1952], [1957], [1962], [1967], [1972], [1977],&lt;br&gt;                        [1982], [1987], [1992], [1997], [2002], [2007])&lt;br&gt;) AS unpvt&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://docs.microsoft.com/en-us/sql/t-sql/queries/from-using-pivot-and-unpivot"&gt;UNPIVOT&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Alter column&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder["year"] = gapminder["year"] - 1&lt;code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder &amp;lt;- mutate(year = year - 1) &lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://dplyr.tidyverse.org/reference/mutate.html"&gt;mutate&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;SELECT country, continent, year - 1 AS year, lifeExp, pop, gdpPercap&lt;br&gt;FROM gapminder&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;this do not alter the original table, it only changes the returned output&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Add column&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder["gdp"] = gapminder["gdpPercap"] * gapminder["pop"]&lt;code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder &amp;lt;- mutate(gdp = gdpPercap * pop)&lt;code&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;SELECT country, continent, year, lifeExp, pop, gdpPercap, pop * gdpPercap AS gdp&lt;br&gt;FROM gapminder&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;this do not alter the original table, it only changes the returned output&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Group by&lt;/td&gt;
&lt;td _wzxhzdk:1_wzxhzdk:12_wzxhzdk:13_wzxhzdk:14_wzxhzdk:15_pop_:_wzxhzdk:2_wzxhzdk:16_wzxhzdk:17_wzxhzdk :18_wzxhzdk:19_wzxhzdk:20_wzxhzdk:21_wzxhzdk:22_wzxhzdk:23_totalpop_:_sum_='&amp;lt;br&amp;gt;    "pop":&amp;lt;br&amp;gt;        {"totalPop":"sum"' align="left"&gt;&lt;code&gt;aggregations = &lt;em&gt;# returns a multiindex dataframe&lt;/em&gt;&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html"&gt;groupby&lt;/a&gt;&lt;br&gt;&lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.agg.html"&gt;agg&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;gapminder %&amp;gt;% &lt;br&gt;  group_by(year, continent) %&amp;gt;% &lt;br&gt;  summarise(totalPop = sum(as.numeric(pop)),&lt;br&gt;    meanLifeExp = mean(lifeExp))&lt;code&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://dplyr.tidyverse.org/reference/group_by.html"&gt;group_by&lt;/a&gt;&lt;br&gt;&lt;a href="https://dplyr.tidyverse.org/reference/summarise.html"&gt;summarise&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;SELECT continent, year, sum(pop) AS totalPop, avg(lifeExp) AS meanLifeExp&lt;br&gt;FROM gapminder&lt;br&gt;GROUP BY continent, year&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><guid>https://htp84.github.io/blog/posts/hej/</guid><pubDate>Mon, 01 Apr 2019 12:11:24 GMT</pubDate></item><item><title>Python, R and TSQL comparison - Reading and writing files</title><link>https://htp84.github.io/blog/posts/python-r-tsql-comparison-reading-writing-files/</link><dc:creator>Henric Sundberg</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is the second part of a series of posts showing data wrangling code in Python, R, and TSQL. This part shows read/write options for Excel and CSV. This is not directly applicable to SQL. Therefore, there is no column for TSQL in the table below.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://htp84.github.io/blog/posts/python-r-tsql-comparison-reading-writing-files/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>R</category><guid>https://htp84.github.io/blog/posts/python-r-tsql-comparison-reading-writing-files/</guid><pubDate>Sat, 30 Mar 2019 00:00:00 GMT</pubDate></item><item><title>Python, R and TSQL comparison - Basic</title><link>https://htp84.github.io/blog/posts/python-r-tsql-compariso-basic/</link><dc:creator>Henric Sundberg</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is the first part of a series of articles showing data wrangling code in Python, R and TSQL that produces equivalent result. In this article I show some basic operations.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://htp84.github.io/blog/posts/python-r-tsql-compariso-basic/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Python</category><category>R</category><category>TSQL</category><guid>https://htp84.github.io/blog/posts/python-r-tsql-compariso-basic/</guid><pubDate>Sat, 16 Mar 2019 00:00:00 GMT</pubDate></item></channel></rss>